name: CI

on:
  push:
    branches:
      - master
      - feature/**
  pull_request:

jobs:
  tests:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Run tests via Codex
        id: run_codex
        uses: openai/codex-action@v1
        with:
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          sandbox: danger-full-access
          prompt: |
            You are operating inside a GitHub Actions CI job with Docker Compose available and the repository checked out at the workspace root.

            Objective:
            0. Enable `set -euo pipefail` and define a helper function `run_step` that:
               - prints a banner such as `=== Running: <command> ===`.
               - executes the provided command while streaming stdout/stderr via `tee` to a temp log file.
               - when the command fails, captures the exit code and the last 100 lines of the temp log for reporting, then short-circuits the remaining steps.
            1. Set `DOCKER_CONFIG=/tmp/docker-config` and ensure `"$DOCKER_CONFIG/buildx"` exists so Docker can create build state.
            2. Build the Docker images needed for the test runs: `docker compose build`.
            3. Execute the auth service tests by running `docker compose run --rm auth npm test`.
            4. Execute the server service tests by running `docker compose run --rm mcp sh -c "npm install && npm test"`.
            5. After tests finish (regardless of outcome) call `docker compose down --remove-orphans` to clean up containers.
            6. If any command returns a non-zero exit code, stop immediately and report the failure details.
            7. When both test commands succeed, produce a concise success summary that mentions each command.
            Reporting:
            - Begin the final message with `RESULT: SUCCESS` if all commands succeed.
            - Begin the final message with `RESULT: FAILURE` followed by the failing command, its exit code, and the captured log output (trimmed to the last 100 lines) if any command fails.

            Constraints:
            - Execute commands using shell syntax in the repository root.
            - Treat any non-zero exit status as a failure of this CI job.
            - Do not modify repository files or perform additional installs beyond the commands listed.

            Provide the results in the final message.

      - name: Analyze Codex result
        id: analyze
        if: always()
        run: |
          final="${{ steps.run_codex.outputs.final-message }}"
          if [[ -z "$final" ]]; then
            echo "Codex did not return a final message" >&2
            exit 1
          fi
          echo "$final"
          if [[ "$final" == RESULT:\ FAILURE* ]]; then
            {
              echo "status=failure"
              echo "message<<MESSAGE"
              printf '%s\n' "$final"
              echo "MESSAGE"
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [[ "$final" == RESULT:\ SUCCESS* ]]; then
            {
              echo "status=success"
              echo "message<<MESSAGE"
              printf '%s\n' "$final"
              echo "MESSAGE"
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "Unexpected Codex result format: $final" >&2
          exit 1

      - name: Comment on PR with failure details
        if: ${{ github.event_name == 'pull_request' && steps.analyze.outputs.status == 'failure' }}
        uses: actions/github-script@v7
        env:
          FAILURE_MESSAGE: ${{ steps.analyze.outputs.message }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const body = `❌ Codex CI detected test failures:\n\n\`\`\`\n${process.env.FAILURE_MESSAGE}\n\`\`\``;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body,
            });

      - name: Fail job on Codex failure
        if: ${{ steps.analyze.outputs.status == 'failure' }}
        run: |
          echo "Codex reported failure" >&2
          exit 1
